version: '3'
services:
  flowexport:
    image: cha87de/flowexport:latest
    stdin_open: true
    tty: true
    environment:
      INTERFACE: 'ens3'
      INTERVAL: '60'
      MAXAGE: '2'
      MODE: 'netflow'
      TARGET: '127.0.0.1:2055'
    network_mode: host
  goflow:
    image: cloudflare/goflow:v3.4.1
    stdin_open: true
    tty: true
    ports:
      - '6343:6343/udp'
      - '2055:2055/udp'
    entrypoint: '/bin/sh'
    command: >
      -c "sleep 15 ;
      /goflow -kafka.brokers kafka:9092
      -kafka.topic flows
      -nf=true
      -nf.port 2055"
  zookeeper:
    image: 'bitnami/zookeeper:3.6.2'
    stdin_open: true
    tty: true
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: 'bitnami/kafka:2.6.0'
    stdin_open: true
    tty: true
    ports:
      - '9092:9092'
      - '29092:29092'
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_DELETE_TOPIC_ENABLE=true
  initializer:
    image: 'bitnami/kafka:2.6.0'
    depends_on:
      - 'kafka'
    entrypoint: '/bin/bash'
    command: >
      -c "sleep 15 ;
      kafka-topics.sh --create --zookeeper zookeeper:2181 --replication-factor 1 --partitions 2 --topic flows ;"
  enricher:
    image: ghcr.io/bwnetflow/processor_enricher:latest
    stdin_open: true
    tty: true
    restart: unless-stopped
    environment:
      KAFKA_BROKERS: kafka:9092
      KAFKA_IN_TOPIC: flows
      KAFKA_OUT_TOPIC: flows-enriched
      CONSUMER_GROUP: test-consumer-group
      DISABLE_AUTH: 'true'
      DISABLE_TLS: 'true'
  consumer:
    image: ghcr.io/bwnetflow/consumer_prometheus:latest
    stdin_open: true
    tty: true
    restart: unless-stopped
    ports:
      - '8080:8080'
    environment:
      KAFKA_BROKERS: kafka:9092
      KAFKA_TOPIC: flows-enriched
      CONSUMER_GROUP: test-consumer-group
      DISABLE_AUTH: 'true'
      DISABLE_TLS: 'true'
      AUTH_ANON: 'false'
  prometheus:
    image: 'prom/prometheus:v2.22.0'
    ports:
      - '9090:9090'
    restart: always
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=2h'
      - '--web.enable-lifecycle'
  grafana:
    image: 'grafana/grafana:7.2.2'
    ports:
      - '3000:3000'
    restart: always
    volumes:
      - ./grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      GF_LOG_LEVEL: 'error'
      GF_DASHBOARDS_JSON_ENABLED: 'true'
      GF_INSTALL_PLUGINS: grafana-worldmap-panel,grafana-piechart-panel
      GF_USER_ALLOW_SIGN_UP: 'false'
      GF_SECURITY_ADMIN_USER: demo
      GF_SECURITY_ADMIN_PASSWORD: demo
